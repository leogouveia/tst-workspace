[{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/jest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/app.component.html","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/app.component.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/app.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/app.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/http-interceptors/caching-interceptor.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[425,428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[425,428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1599,1602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1599,1602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1678,1681],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1678,1681],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2042,2045],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2042,2045],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { RequestCache } from './request-cache.service';\nimport { Observable, of, startWith, tap } from 'rxjs';\n\n@Injectable()\nexport class CachingInterceptor implements HttpInterceptor {\n  constructor(private cache: RequestCache) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    if (!isCacheable(req)) {\n      return next.handle(req);\n    }\n    const cachedResponse = this.cache.get(req);\n\n    // cache-then-refresh\n    if (req.headers.get('x-refresh')) {\n      const results$ = this.sendRequest(req, next, this.cache);\n      if (\n        cachedResponse &&\n        'body' in cachedResponse &&\n        cachedResponse.body.length > 0 &&\n        cachedResponse.body[0]['name']\n      ) {\n        cachedResponse.body[0]['name'] = 'cacheosaur';\n      }\n\n      return cachedResponse\n        ? results$.pipe(startWith(cachedResponse))\n        : results$;\n    }\n\n    // cache-or-fetch\n    if (cachedResponse) {\n      return of(cachedResponse).pipe(\n        tap((response) => {\n          console.log('CachingInterceptor cachedResponse', response);\n        })\n      );\n    }\n\n    return next.handle(req).pipe(\n      tap((event) => {\n        // There may be other events besides the response.\n        if (event instanceof HttpResponse) {\n          console.log('CachingInterceptor sendRequest event', event);\n          this.cache.put(req, event); // Update the cache.\n        }\n      })\n    );\n  }\n\n  sendRequest(\n    req: HttpRequest<any>,\n    next: HttpHandler,\n    cache: RequestCache\n  ): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(\n      tap((event) => {\n        // There may be other events besides the response.\n        if (event instanceof HttpResponse) {\n          console.log('CachingInterceptor sendRequest event', event);\n          cache.put(req, event); // Update the cache.\n        }\n      })\n    );\n  }\n}\n\nfunction isCacheable(req: HttpRequest<any>) {\n  // Only GET requests are cacheable\n  return req.method === 'GET' && req.headers.get('x-cache') == 'true';\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/http-interceptors/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/http-interceptors/message.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/http-interceptors/request-cache.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[241,244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[241,244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[339,342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[339,342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[359,362],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[359,362],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[409,412],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[409,412],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[438,441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[438,441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[701,704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[701,704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[721,724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[721,724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1296,1299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1296,1299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1325,1328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1325,1328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse } from '@angular/common/http';\n\nimport { MessageService } from './message.service';\n\nexport interface RequestCacheEntry {\n  url: string;\n  response: HttpResponse<any>;\n  lastRead: number;\n}\n\nexport abstract class RequestCache {\n  abstract get(req: HttpRequest<any>): HttpResponse<any> | undefined;\n  abstract put(req: HttpRequest<any>, response: HttpResponse<any>): void;\n}\n\nconst maxAge = 30000; // maximum cache age (ms)\n\n@Injectable()\nexport class RequestCacheWithMap implements RequestCache {\n  cache = new Map<string, RequestCacheEntry>();\n\n  constructor(private messenger: MessageService) {}\n\n  get(req: HttpRequest<any>): HttpResponse<any> | undefined {\n    const url = req.urlWithParams;\n    let cached = this.cache.get(url);\n\n    if (!cached) {\n      const rawCached = localStorage.getItem(url);\n      if (rawCached) {\n        cached = JSON.parse(rawCached) as RequestCacheEntry;\n      }\n    }\n\n    if (!cached) {\n      return undefined;\n    }\n\n    const isExpired = cached.lastRead < Date.now() - maxAge;\n    const expired = isExpired ? 'expired ' : '';\n    this.messenger.add(`Found ${expired}cached response for \"${url}\".`);\n    return isExpired ? undefined : cached.response;\n  }\n\n  put(req: HttpRequest<any>, response: HttpResponse<any>): void {\n    const url = req.urlWithParams;\n    this.messenger.add(`Caching response from \"${url}\".`);\n\n    const newEntry = { url, response, lastRead: Date.now() };\n    this.cache.set(url, newEntry);\n    localStorage.setItem(url, JSON.stringify(newEntry));\n\n    // remove expired cache entries\n    const expired = Date.now() - maxAge;\n    this.cache.forEach((entry) => {\n      if (entry.lastRead < expired) {\n        this.cache.delete(entry.url);\n      }\n    });\n\n    this.messenger.add(`Request cache size: ${this.cache.size}.`);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/home/home-routing.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/home/home.component.html","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/home/home.component.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/home/home.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":4,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":4,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent {\n\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/home/home.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste1/components/bar.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":7,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":7,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[706,709],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[706,709],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'OnInit' should be implemented for method 'ngOnInit'. (https://angular.io/styleguide#style-09-01)","line":28,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":28,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":32,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[852,855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[852,855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CommonModule } from '@angular/common';\nimport { AfterViewChecked, Component } from '@angular/core';\nimport { SharedService } from '../shared.service';\nimport { BazComponent } from './baz.component';\n\n@Component({\n  selector: 'app-bar',\n  template: `\n    <div class=\"box\">\n      <h3 class=\"title\">Bar Component [Normal]</h3>\n      <div class=\"content\">\n        <li>My Val: {{ myServVal }}</li>\n        <li>\n          <button type=\"button\" (click)=\"changeVal(20)\">Change Val Bar</button>\n        </li>\n        <p><app-baz></app-baz></p>\n      </div>\n    </div>\n  `,\n  standalone: true,\n  imports: [CommonModule, BazComponent],\n})\nexport class BarComponent implements AfterViewChecked {\n  myServVal: any;\n\n  constructor(private sharedService: SharedService) {}\n\n  ngOnInit() {\n    this.myServVal = this.sharedService.val;\n  }\n\n  changeVal(value: any) {\n    this.sharedService.changeVal(100);\n  }\n\n  ngAfterViewChecked() {\n    console.log('Component Bar view has been checked');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste1/components/baz.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":10,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":24,"column":17,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":24,"endColumn":19},{"ruleId":"@angular-eslint/no-empty-lifecycle-method","severity":2,"message":"Lifecycle methods should not be empty","line":26,"column":3,"nodeType":"MethodDefinition","messageId":"noEmptyLifecycleMethod","endLine":26,"endColumn":16,"suggestions":[{"messageId":"suggestRemoveLifecycleMethod","fix":{"range":[20,611],"text":",\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { QuxComponent } from './qux.component';\n\n@Component({\n  selector: 'app-baz',\n  template: `<div class=\"box\">\n    <h3 class=\"title\">Baz Component [On Push]</h3>\n    <div class=\"content\">\n      <button (click)=\"(clickBaz)\">Click Baz</button>\n      <br />\n      <app-qux></app-qux>\n    </div>\n  </div>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [QuxComponent],\n})\nexport class BazComponent implements  AfterViewChecked {\n  constructor() {}\n\n  "},"desc":"Remove lifecycle method"}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'ngOnInit'.","line":26,"column":14,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":26,"endColumn":16}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Component,\n  OnInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { QuxComponent } from './qux.component';\n\n@Component({\n  selector: 'app-baz',\n  template: `<div class=\"box\">\n    <h3 class=\"title\">Baz Component [On Push]</h3>\n    <div class=\"content\">\n      <button (click)=\"(clickBaz)\">Click Baz</button>\n      <br />\n      <app-qux></app-qux>\n    </div>\n  </div>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [QuxComponent],\n})\nexport class BazComponent implements OnInit, AfterViewChecked {\n  constructor() {}\n\n  ngOnInit() {}\n\n  clickBaz() {\n    console.log('Click Baz');\n  }\n\n  ngAfterViewChecked() {\n    console.log('Component Baz view has been checked');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste1/components/foo.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":6,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":6,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1687,1690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1687,1690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1702,1705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1702,1705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'OnInit' should be implemented for method 'ngOnInit'. (https://angular.io/styleguide#style-09-01)","line":62,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":62,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1931,1934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1931,1934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CommonModule } from '@angular/common';\nimport { Component, AfterViewChecked } from '@angular/core';\nimport { SharedService } from '../shared.service';\n\n@Component({\n  selector: 'app-foo',\n  template: `\n    <div class=\"box\">\n      <h3 class=\"title\">Foo Component [Normal]</h3>\n      <div class=\"content\">\n        <ul>\n          <li>Value: {{ myServVal }}</li>\n          <li>Object: {{ objVar | json }}</li>\n          <li>Value From Service: {{ valueFromService ?? 'null' }}</li>\n        </ul>\n        <hr />\n        <ul>\n          <li>\n            <button type=\"button\" (click)=\"changeVal(10)\">\n              Change Val Foo (Change Reference)\n            </button>\n            <div class=\"annotation\">Change reference of the Val.</div>\n          </li>\n        </ul>\n        <ul>\n          <li>\n            <button type=\"button\" (click)=\"changeProp()\">\n              Only change prop from object Foo\n            </button>\n            <div class=\"annotation\">\n              Only change property from object, not changing it's Reference\n            </div>\n          </li>\n        </ul>\n        <ul>\n          <li>\n            <button (click)=\"changeObject()\">Change Object</button>\n            <div class=\"annotation\">Change reference of the object</div>\n          </li>\n        </ul>\n        <ul>\n          <li>\n            <button (click)=\"getValFromService()\">\n              Get Value From Service\n            </button>\n            <div class=\"annotation\">Get value from service again using fn.</div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n  standalone: true,\n  imports: [CommonModule],\n})\nexport class FooComponent implements AfterViewChecked {\n  myServVal: any;\n  objVar: any;\n  valueFromService?: number = 0;\n\n  constructor(private sharedService: SharedService) {}\n\n  ngOnInit() {\n    this.myServVal = this.sharedService.val;\n    this.objVar = this.sharedService.myObjectVal;\n  }\n\n  changeVal(value: any) {\n    this.sharedService.changeVal(value);\n  }\n\n  changeProp() {\n    this.sharedService.changePropObject(10);\n  }\n\n  getValFromService() {\n    this.valueFromService = this.sharedService.getVal();\n  }\n\n  setValFromService() {\n    this.sharedService.setVal((this.valueFromService ?? 0) + 100);\n  }\n\n  changeObject() {\n    this.sharedService.changeObject({\n      prop1: 10,\n      prop2: 20,\n    });\n  }\n\n  ngAfterViewChecked() {\n    console.log('Component Foo view has been checked');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste1/components/fred.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":9,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":9,"endColumn":23},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":24,"column":17,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":24,"endColumn":19},{"ruleId":"@angular-eslint/no-empty-lifecycle-method","severity":2,"message":"Lifecycle methods should not be empty","line":26,"column":3,"nodeType":"MethodDefinition","messageId":"noEmptyLifecycleMethod","endLine":26,"endColumn":16,"suggestions":[{"messageId":"suggestRemoveLifecycleMethod","fix":{"range":[20,578],"text":",\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-fred',\n  template: `\n    <div class=\"box\">\n      <div class=\"title\">Fred Component [On Push]</div>\n      <div class=\"content\">\n        <span style=\"border: 1px solid blue; padding: 2px\">\n          <span> Fred Content </span></span\n        >\n      </div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n})\nexport class FredComponent implements  AfterViewChecked {\n  constructor() {}\n\n  "},"desc":"Remove lifecycle method"}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'ngOnInit'.","line":26,"column":14,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":26,"endColumn":16}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Component,\n  OnInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-fred',\n  template: `\n    <div class=\"box\">\n      <div class=\"title\">Fred Component [On Push]</div>\n      <div class=\"content\">\n        <span style=\"border: 1px solid blue; padding: 2px\">\n          <span> Fred Content </span></span\n        >\n      </div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n})\nexport class FredComponent implements OnInit, AfterViewChecked {\n  constructor() {}\n\n  ngOnInit() {}\n\n  ngAfterViewChecked() {\n    console.log('Component fred view has been checked');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste1/components/qux.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":10,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":24,"column":17,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":24,"endColumn":19},{"ruleId":"@angular-eslint/no-empty-lifecycle-method","severity":2,"message":"Lifecycle methods should not be empty","line":26,"column":3,"nodeType":"MethodDefinition","messageId":"noEmptyLifecycleMethod","endLine":26,"endColumn":16,"suggestions":[{"messageId":"suggestRemoveLifecycleMethod","fix":{"range":[20,613],"text":",\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { FredComponent } from './fred.component';\n\n@Component({\n  selector: 'app-qux',\n  template: `\n    <div class=\"box\">\n      <h3 class=\"title\">Qux Component [On Push]</h3>\n      <p class=\"content\">\n        <button (click)=\"clickQux()\">Click QUX</button> & <app-fred></app-fred>\n      </p>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [FredComponent],\n})\nexport class QuxComponent implements  AfterViewChecked {\n  constructor() {}\n\n  "},"desc":"Remove lifecycle method"}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'ngOnInit'.","line":26,"column":14,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":26,"endColumn":16},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'clickQux'.","line":27,"column":14,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":27,"endColumn":16}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Component,\n  OnInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { FredComponent } from './fred.component';\n\n@Component({\n  selector: 'app-qux',\n  template: `\n    <div class=\"box\">\n      <h3 class=\"title\">Qux Component [On Push]</h3>\n      <p class=\"content\">\n        <button (click)=\"clickQux()\">Click QUX</button> & <app-fred></app-fred>\n      </p>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [FredComponent],\n})\nexport class QuxComponent implements OnInit, AfterViewChecked {\n  constructor() {}\n\n  ngOnInit() {}\n  clickQux() {}\n  ngAfterViewChecked() {\n    console.log('Component Qux view has been checked');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste1/shared.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[195,198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[195,198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[252,255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[252,255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[320,323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[320,323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[571,574],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[571,574],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SharedService {\n  val = 1;\n  myObjectVal = {\n    prop1: 1,\n    prop2: 2,\n  };\n\n  changeVal(value: any) {\n    this.val += value;\n  }\n\n  changeObject(value: any) {\n    this.myObjectVal = value;\n  }\n\n  changePropObject(value: any) {\n    const newValue = this.myObjectVal.prop1 + value;\n    this.myObjectVal.prop1 = newValue;\n    const newProp2 = this.myObjectVal.prop2 + value;\n    this.myObjectVal.prop2 = newProp2;\n  }\n\n  getVal() {\n    return this.val;\n  }\n\n  setVal(value: any) {\n    this.val = value;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste1/teste1.component.html","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste1/teste1.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CommonModule' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":22},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":5,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":5,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-teste1',\n  templateUrl: './teste1.component.html',\n  styleUrls: ['./teste1.component.scss'],\n})\nexport class Teste1Component {}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste1/teste1.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste2/components/Bar.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":9,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":9,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Shared2Service } from '../shared2.service';\n\n@Component({\n  selector: 'app-bar',\n  template: `<div class=\"box\">\n    <h2 class=\"title\">Bar Component [OnPush]</h2>\n    <div class=\"content\">\n      <ul>\n        <li>Value$: {{ val$ | async }}</li>\n      </ul>\n    </div>\n\n    <app-baz></app-baz>\n  </div>`,\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BarComponent implements AfterViewChecked {\n  val$ = this.sharedService.valBS.asObservable();\n  constructor(private sharedService: Shared2Service) {}\n\n  ngAfterViewChecked() {\n    console.log(\n      'Teste2: Component %cBar%c view has been checked',\n      'color: green',\n      'color: auto'\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste2/components/Baz.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":10,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":10,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  Component,\n  inject,\n} from '@angular/core';\nimport { Shared2Service } from '../shared2.service';\n\n@Component({\n  selector: 'app-baz',\n  template: ` <div class=\"box\">\n    <h2 class=\"title\">Baz Component [OnPush]</h2>\n    <div class=\"content\">\n      <ul>\n        <li>Value$: {{ val$ | async }}</li>\n      </ul>\n      <app-qux></app-qux>\n    </div>\n  </div>`,\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BazComponent implements AfterViewChecked {\n  private sharedService = inject(Shared2Service);\n  val$ = this.sharedService.valBS.asObservable();\n\n  ngAfterViewChecked() {\n    console.log(\n      'Teste2: Component %cBaz%c view has been checked',\n      'color: red',\n      'color: auto'\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste2/components/Fred.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":10,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":10,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  Component,\n  inject,\n} from '@angular/core';\nimport { Shared2Service } from '../shared2.service';\n\n@Component({\n  selector: 'app-fred',\n  template: `\n    <div class=\"box\">\n      <h2 class=\"title\">Fred Component</h2>\n      <div class=\"content\">\n        <ul>\n          <li>Value: {{ obj | json }}</li>\n        </ul>\n      </div>\n    </div>\n  `,\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FredComponent implements AfterViewChecked {\n  sharedService = inject(Shared2Service);\n  obj = this.sharedService.myObjectVal;\n\n  ngAfterViewChecked() {\n    console.log(\n      'Teste2: Component %cFred%c view has been checked',\n      'color: orange',\n      'color: auto'\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste2/components/Qux.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":8,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":8,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-qux',\n  template: `\n    <div class=\"box\">\n      <h2 class=\"title\">Qux Component [OnPush]</h2>\n      <div class=\"content\">\n        <div>\n          A partir do componente filho, o que não fizer trigger do OnPush não\n          será atualizado.\n        </div>\n        <ul style=\"display: flex; flex-direction: column; gap: 10px;\">\n          <li>\n            Se algum @Input mudar.\n            <div class=\"annotation\">\n              Se a referencia dos inputs não mudar, o Angular assume que o\n              componente é o mesmo e não o verifica novamente.\n            </div>\n          </li>\n          <li>Se algum evento for emitido no component.</li>\n          <li>\n            Se um observable for emitido e o componente estiver inscrito.\n            <div class=\"annotation\">\n              Se você estiver passando um Observable como um @Input para um\n              componente que usa OnPush, você precisa se inscrever ao Observable\n              no nível do template usando o pipe async.\n            </div>\n          </li>\n          <li>Se o método markForCheck() for chamado.</li>\n        </ul>\n        <app-fred></app-fred>\n      </div>\n    </div>\n  `,\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class QuxComponent implements AfterViewChecked {\n  ngAfterViewChecked() {\n    console.log(\n      'Teste2: Component %cQux%c view has been checked',\n      'color: blue',\n      'color: auto'\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste2/components/foo.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CommonModule' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":22},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":6,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":6,"endColumn":22},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'OnInit' should be implemented for method 'ngOnInit'. (https://angular.io/styleguide#style-09-01)","line":73,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":73,"endColumn":11},{"ruleId":"@angular-eslint/no-empty-lifecycle-method","severity":2,"message":"Lifecycle methods should not be empty","line":73,"column":3,"nodeType":"MethodDefinition","messageId":"noEmptyLifecycleMethod","endLine":73,"endColumn":16,"suggestions":[{"messageId":"suggestRemoveLifecycleMethod","fix":{"range":[2156,2169],"text":""},"desc":"Remove lifecycle method"}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'ngOnInit'.","line":73,"column":14,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":73,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2190,2193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2190,2193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'OnDestroy' should be implemented for method 'ngOnDestroy'. (https://angular.io/styleguide#style-09-01)","line":106,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":106,"endColumn":14}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CommonModule } from '@angular/common';\nimport { Component, AfterViewChecked } from '@angular/core';\nimport { Shared2Service } from '../shared2.service';\n\n@Component({\n  selector: 'app-foo',\n  template: `\n    <div class=\"box\">\n      <h3 class=\"title\">Foo Component [Normal]</h3>\n      <div class=\"content\">\n        <div>\n          <h4>Common Values</h4>\n          <ul>\n            <li>Value: {{ myServVal }}</li>\n            <li>Object: {{ objVar | json }}</li>\n            <li>Value From Service: {{ valueFromService ?? 'null' }}</li>\n          </ul>\n        </div>\n        <div>\n          <h4>Reactive Values</h4>\n          <ul>\n            <li>Value: {{ valBS | async }}</li>\n            <li>Object: {{ objectBS | async | json }}</li>\n          </ul>\n        </div>\n        <hr />\n        <ul>\n          <li>\n            <button type=\"button\" (click)=\"changeVal(10)\">\n              Change Val Foo (Change Reference)\n            </button>\n            <div class=\"annotation\">Change reference of the Val.</div>\n          </li>\n        </ul>\n        <ul>\n          <li>\n            <button type=\"button\" (click)=\"changeProp()\">\n              Only change prop from object Foo\n            </button>\n            <div class=\"annotation\">\n              Only change property from object, not changing it's Reference\n            </div>\n          </li>\n        </ul>\n        <ul>\n          <li>\n            <button (click)=\"changeObject()\">Change Object</button>\n            <div class=\"annotation\">Change reference of the object</div>\n          </li>\n        </ul>\n        <ul>\n          <li>\n            <button (click)=\"getValFromService()\">\n              Get Value From Service\n            </button>\n            <div class=\"annotation\">Get value from service again using fn.</div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n})\nexport class FooComponent implements AfterViewChecked {\n  myServVal = this.sharedService.val;\n  objVar = this.sharedService.myObjectVal;\n  valueFromService?: number = 0;\n\n  valBS = this.sharedService.valBS;\n  objectBS = this.sharedService.objectBS;\n\n  constructor(private sharedService: Shared2Service) {}\n\n  ngOnInit() {}\n\n  changeVal(value: any) {\n    this.sharedService.changeVal(value);\n  }\n\n  changeProp() {\n    this.sharedService.changePropObject(10);\n  }\n\n  getValFromService() {\n    this.valueFromService = this.sharedService.getVal();\n  }\n\n  setValFromService() {\n    this.sharedService.changeVal((this.valueFromService ?? 0) + 100);\n  }\n\n  changeObject() {\n    this.sharedService.changeObject({\n      prop1: 10,\n      prop2: 20,\n    });\n  }\n\n  ngAfterViewChecked() {\n    console.log(\n      'Teste2: Component %cFoo%c view has been checked',\n      'color: yellow',\n      'color: auto'\n    );\n  }\n\n  ngOnDestroy() {\n    console.log(\n      'Teste2: Component %cFoo%c has been destroyed',\n      'color: red',\n      'color: auto'\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste2/shared2.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[292,295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[292,295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[354,357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[354,357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[458,461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[458,461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[557,560],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[557,560],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class Shared2Service {\n  val = 1;\n  myObjectVal = {\n    prop1: 1,\n    prop2: 2,\n  };\n\n  valBS = new BehaviorSubject<number>(1);\n  objectBS = new BehaviorSubject<any>({\n    prop1: 1,\n    prop2: 20,\n  });\n\n  changeVal(value: any) {\n    this.val += value;\n    this.valBS.next(this.valBS.value + value);\n  }\n\n  changeObject(value: any) {\n    this.myObjectVal = value;\n    this.objectBS.next(value);\n  }\n\n  changePropObject(value: any) {\n    const newValue = this.myObjectVal.prop1 + value;\n    this.myObjectVal.prop1 = newValue;\n    const newProp2 = this.myObjectVal.prop2 + value;\n    this.myObjectVal.prop2 = newProp2;\n\n    this.objectBS.next({\n      ...this.objectBS.value,\n      prop1: newValue,\n      prop2: newProp2,\n    });\n  }\n\n  getVal() {\n    return this.val;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste2/teste2-routing.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste2/teste2.component.html","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste2/teste2.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":4,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":4,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-teste2',\n  templateUrl: './teste2.component.html',\n  styleUrls: ['./teste2.component.scss']\n})\nexport class Teste2Component {\n\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste2/teste2.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste3/Teste3.component.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[555,558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[555,558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'OnInit' should be implemented for method 'ngOnInit'. (https://angular.io/styleguide#style-09-01)","line":30,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":30,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { interval } from 'rxjs';\nimport pwc from 'pretty-web-console';\n\nimport { DatePipe } from '@angular/common';\nimport { ColorsService } from '../../shared/colors.service';\n\n@Component({\n  template: `\n    <h2>Teste 3 - Teste Componente sem Unsubscribe</h2>\n    <div class=\"box\">\n      <h2 class=\"title\">Title3 Component</h2>\n      <div class=\"content\">\n        <p>Counter: {{ counter }}</p>\n      </div>\n    </div>\n  `,\n  styles: [],\n})\nexport class Teste3Component {\n  counter = 0;\n\n  private subscription: any;\n\n  constructor(\n    private colorsService: ColorsService,\n    private datePipe: DatePipe\n  ) {}\n\n  ngOnInit() {\n    const darkColor = this.colorsService.getDarkColor();\n    const brightColor = this.colorsService.getBrightColor();\n    const time = this.datePipe.transform(new Date(), 'HH:mm:ss.SSS');\n\n    const logger = pwc()\n      .bg(darkColor)\n      .color(brightColor)\n      .weight('bold')\n      .padding('15px 20px');\n\n    this.subscription = interval(1000).subscribe((value) => {\n      this.counter = value;\n      logger.log(`Teste3Component [${time}]: ${value}`);\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste3/teste3-routing.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste3/teste3.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste4/components/Bar.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'takeUntil' is defined but never used.","line":2,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":52},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":6,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":6,"endColumn":22},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'AfterViewChecked' should be implemented for method 'ngAfterViewChecked'. (https://angular.io/styleguide#style-09-01)","line":71,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":71,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, OnDestroy } from '@angular/core';\nimport { Subject, Subscription, finalize, takeUntil } from 'rxjs';\nimport { Teste4SharedService } from '../teste4-shared.service';\n\n@Component({\n  selector: 'app-bar',\n  template: `\n    <div class=\"box\">\n      <h3 class=\"title\">Bar</h3>\n      <div class=\"content\">\n        <button type=\"button\" (click)=\"getDataUsingObservable()\">\n          getDataUsingObservable\n        </button>\n        <hr />\n        <button type=\"button\" (click)=\"cancelRequests()\">\n          Cancela requestes\n        </button>\n        <hr />\n        <div>Response {{ teste$ | async | json }}</div>\n      </div>\n    </div>\n  `,\n  styles: [],\n})\nexport class BarComponent implements OnDestroy {\n  destroy$ = new Subject<boolean>();\n  subscriptions: Subscription[] = [];\n\n  teste$ = this.teste4Service.getHttpWithObservable(10).pipe(\n    finalize(() => {\n      console.log('http finalize');\n    })\n  );\n\n  constructor(private teste4Service: Teste4SharedService) {}\n\n  getDataUsingObservable() {\n    for (let i = 0; i < 10; i++) {\n      this.fetch(i + 1);\n    }\n  }\n\n  fetch(delay = 1) {\n    console.log('getting data using observable');\n    const subs = this.teste4Service\n      .getHttpWithObservable(delay)\n      .pipe(finalize(() => console.log('Teste4: httpObs/many finalize')))\n      .subscribe((data) => {\n        console.log('Observable data', data);\n      });\n    this.subscriptions.push(subs);\n  }\n\n  cancelRequests() {\n    this.subscriptions.forEach((s) => {\n      console.log('ubsubscribing');\n      s.unsubscribe();\n    });\n  }\n\n  ngOnDestroy(): void {\n    console.log('Teste4 BarComponent ngOnDestroy');\n    this.destroy$.next(true);\n    this.destroy$.unsubscribe();\n    this.subscriptions.forEach((s) => {\n      console.log('ubsubscribing');\n      s.unsubscribe();\n    });\n  }\n\n  ngAfterViewChecked() {\n    console.log(\n      '%cTeste4: Component Bar view has been checked',\n      'color: green'\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste4/components/Foo.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'delay' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":15},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":6,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":6,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[498,501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[498,501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[625,628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[625,628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'OnDestroy' should be implemented for method 'ngOnDestroy'. (https://angular.io/styleguide#style-09-01)","line":44,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":44,"endColumn":14},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'AfterViewChecked' should be implemented for method 'ngAfterViewChecked'. (https://angular.io/styleguide#style-09-01)","line":48,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":48,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { Teste4SharedService } from '../teste4-shared.service';\nimport { delay } from 'rxjs';\n\n@Component({\n  selector: 'app-foo',\n  template: `\n    <div class=\"box\">\n      <h3 class=\"title\">Foo</h3>\n      <div class=\"content\">\n        <p>\n          <button type=\"button\" (click)=\"getDataUsingPromise()\">\n            Get data using Promise\n          </button>\n        </p>\n      </div>\n    </div>\n  `,\n  styles: [],\n})\nexport class FooComponent {\n  data: any;\n  constructor(private teste4Service: Teste4SharedService) {}\n\n  async getDataUsingPromise() {\n    const promises: Promise<any>[] = [];\n    for (let i = 0; i < 10; i++) {\n      promises.push(this.fetch(i + 1));\n    }\n    Promise.all(promises).then(() => {\n      console.log('all promises resolved');\n    });\n  }\n\n  async fetch(delay = 1000) {\n    console.log('getting data using promise');\n    return this.teste4Service.getHttpWithPromise(delay).then((data) => {\n      this.data = data;\n      console.log('data', data);\n      console.log('fim promise');\n    });\n  }\n\n  ngOnDestroy(): void {\n    console.log('Teste4 BarComponent ngOnDestroy');\n  }\n\n  ngAfterViewChecked() {\n    console.log(\n      'Teste4: Component %cFoo%c view has been checked',\n      'color: yellow',\n      'color: auto'\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste4/teste4-shared.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'delay' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'shareReplay' is defined but never used.","line":3,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { delay, shareReplay } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class Teste4SharedService {\n  constructor(private http: HttpClient) {}\n\n  getHttpWithPromise(delay: number) {\n    return this.http.get('http://localhost:3000/delay/' + delay).toPromise();\n  }\n\n  getHttpWithObservable(delay = 1) {\n    return this.http.get('http://localhost:3000/delay/' + delay);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste4/teste4.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":4,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":4,"endColumn":25},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":12,"column":17,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":12,"endColumn":19},{"ruleId":"@angular-eslint/no-empty-lifecycle-method","severity":2,"message":"Lifecycle methods should not be empty","line":14,"column":3,"nodeType":"MethodDefinition","messageId":"noEmptyLifecycleMethod","endLine":14,"endColumn":16,"suggestions":[{"messageId":"suggestRemoveLifecycleMethod","fix":{"range":[18,303],"text":" } from '@angular/core';\n\n@Component({\n  selector: 'app-teste4',\n  template: `\n    <h2>Testa Unsubscribe e Cancelamento de Requests</h2>\n    <app-foo></app-foo>\n    <app-bar></app-bar>\n  `,\n})\nexport class Teste4Component  {\n  constructor() {}\n\n  "},"desc":"Remove lifecycle method"}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'ngOnInit'.","line":14,"column":14,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":14,"endColumn":16}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-teste4',\n  template: `\n    <h2>Testa Unsubscribe e Cancelamento de Requests</h2>\n    <app-foo></app-foo>\n    <app-bar></app-bar>\n  `,\n})\nexport class Teste4Component implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste4/teste4.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste5/combo.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":29,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":29,"endColumn":21},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":44,"column":17,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":44,"endColumn":19},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should be kebab-case and start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-05-02 and https://angular.io/guide/styleguide#style-02-07)","line":53,"column":13,"nodeType":"Literal","messageId":"styleAndPrefixFailure","endLine":53,"endColumn":23},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":69,"column":17,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":69,"endColumn":19},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should be kebab-case and start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-05-02 and https://angular.io/guide/styleguide#style-02-07)","line":78,"column":13,"nodeType":"Literal","messageId":"styleAndPrefixFailure","endLine":78,"endColumn":25},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":91,"column":17,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":91,"endColumn":19},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should be kebab-case and start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-05-02 and https://angular.io/guide/styleguide#style-02-07)","line":100,"column":13,"nodeType":"Literal","messageId":"styleAndPrefixFailure","endLine":100,"endColumn":23},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":113,"column":17,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":113,"endColumn":19},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":122,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":122,"endColumn":21},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":136,"column":17,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":136,"endColumn":19},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'AfterViewChecked' should be implemented for method 'ngAfterViewChecked'. (https://angular.io/styleguide#style-09-01)","line":138,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":138,"endColumn":21},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should be kebab-case and start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-05-02 and https://angular.io/guide/styleguide#style-02-07)","line":145,"column":13,"nodeType":"Literal","messageId":"styleAndPrefixFailure","endLine":145,"endColumn":23},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":159,"column":17,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":159,"endColumn":19},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'AfterViewChecked' should be implemented for method 'ngAfterViewChecked'. (https://angular.io/styleguide#style-09-01)","line":161,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":161,"endColumn":21},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should be kebab-case and start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-05-02 and https://angular.io/guide/styleguide#style-02-07)","line":171,"column":13,"nodeType":"Literal","messageId":"styleAndPrefixFailure","endLine":171,"endColumn":25},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":185,"column":17,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":185,"endColumn":19},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'AfterViewChecked' should be implemented for method 'ngAfterViewChecked'. (https://angular.io/styleguide#style-09-01)","line":187,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":187,"endColumn":21},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":197,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":197,"endColumn":21},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":208,"column":17,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":208,"endColumn":19},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'AfterViewChecked' should be implemented for method 'ngAfterViewChecked'. (https://angular.io/styleguide#style-09-01)","line":210,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":210,"endColumn":21},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":221,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":221,"endColumn":21},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'AfterViewChecked' should be implemented for method 'ngAfterViewChecked'. (https://angular.io/styleguide#style-09-01)","line":232,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":232,"endColumn":21},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should be kebab-case and start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-05-02 and https://angular.io/guide/styleguide#style-02-07)","line":239,"column":13,"nodeType":"Literal","messageId":"styleAndPrefixFailure","endLine":239,"endColumn":23},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'AfterViewChecked' should be implemented for method 'ngAfterViewChecked'. (https://angular.io/styleguide#style-09-01)","line":251,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":251,"endColumn":21},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should be kebab-case and start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-05-02 and https://angular.io/guide/styleguide#style-02-07)","line":258,"column":13,"nodeType":"Literal","messageId":"styleAndPrefixFailure","endLine":258,"endColumn":25},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'AfterViewChecked' should be implemented for method 'ngAfterViewChecked'. (https://angular.io/styleguide#style-09-01)","line":272,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":272,"endColumn":21},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":279,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":279,"endColumn":21},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'AfterViewChecked' should be implemented for method 'ngAfterViewChecked'. (https://angular.io/styleguide#style-09-01)","line":289,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":289,"endColumn":21},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":296,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":296,"endColumn":21},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'AfterViewChecked' should be implemented for method 'ngAfterViewChecked'. (https://angular.io/styleguide#style-09-01)","line":306,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":306,"endColumn":21},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":317,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":317,"endColumn":21},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'AfterViewChecked' should be implemented for method 'ngAfterViewChecked'. (https://angular.io/styleguide#style-09-01)","line":327,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":327,"endColumn":21},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":334,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":334,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'strategy' is defined but never used.","line":352,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":352,"endColumn":30},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'changeView'.","line":352,"column":32,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":352,"endColumn":34},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'AfterViewChecked' should be implemented for method 'ngAfterViewChecked'. (https://angular.io/styleguide#style-09-01)","line":354,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":354,"endColumn":21},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":361,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":361,"endColumn":21},{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'AfterViewChecked' should be implemented for method 'ngAfterViewChecked'. (https://angular.io/styleguide#style-09-01)","line":381,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":381,"endColumn":21}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CommonModule } from '@angular/common';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Injectable,\n  NgModule,\n} from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport pwc from 'pretty-web-console';\n\nconst changeDetectionStrategy = ChangeDetectionStrategy.Default;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class Teste5Service {\n  val: BehaviorSubject<number> = new BehaviorSubject<number>(0);\n\n  toggleValue() {\n    this.val.next(this.val.getValue() === 0 ? 1 : 0);\n  }\n}\n\n//#region Componentes A\n\n@Component({\n  selector: 'app-a1',\n  template: `\n    <div class=\"title\">A1 ({{ value }})</div>\n    <div class=\"content\">\n      <app-A1_1></app-A1_1>\n      <app-A1_2></app-A1_2>\n    </div>\n  `,\n  styles: [''],\n  changeDetection: changeDetectionStrategy,\n})\nexport class A1Component implements AfterViewChecked {\n  @HostBinding('class') class = 'box';\n  value = 0;\n\n  constructor() {}\n\n  ngAfterViewChecked(): void {\n    pwc().bg('red').color('white').log('A1Component.ngAfterViewChecked');\n    this.value++;\n  }\n}\n\n@Component({\n  selector: 'app-A1_1',\n  template: `\n    <div class=\"box\">\n      <div class=\"title\">A1_1 ({{ value }})</div>\n      <div class=\"content\">\n        <app-A1_1_1></app-A1_1_1>\n      </div>\n    </div>\n  `,\n  styles: [''],\n  changeDetection: changeDetectionStrategy,\n})\nexport class A1_1Component implements AfterViewChecked {\n  @HostBinding('class') class = '';\n  value = 0;\n\n  constructor() {}\n\n  ngAfterViewChecked(): void {\n    pwc().bg('red').color('white').log('A1_1_Component.ngAfterViewChecked');\n    this.value++;\n  }\n}\n\n@Component({\n  selector: 'app-A1_1_1',\n  template: `\n    <div class=\"box\">\n      <div class=\"title\">A1_1_1 ({{ value }})</div>\n      <div class=\"content\"><button (click)=\"({})\">Click</button></div>\n    </div>\n  `,\n  styles: [''],\n  changeDetection: changeDetectionStrategy,\n})\nexport class A1_1_1Component implements AfterViewChecked {\n  @HostBinding('class') class = '';\n  value = 0;\n  constructor() {}\n\n  ngAfterViewChecked(): void {\n    pwc().bg('red').color('white').log('A1_1_1_Component.ngAfterViewChecked');\n    this.value++;\n  }\n}\n\n@Component({\n  selector: 'app-A1_2',\n  template: `\n    <div class=\"box\">\n      <div class=\"title\">A1_2 ({{ value }})</div>\n      <div class=\"content\">Content A1_2</div>\n    </div>\n  `,\n  styles: [''],\n  changeDetection: changeDetectionStrategy,\n})\nexport class A1_2Component implements AfterViewChecked {\n  @HostBinding('class') class = '';\n  value = 0;\n  constructor() {}\n\n  ngAfterViewChecked(): void {\n    pwc().bg('red').color('white').log('A1_2_Component.ngAfterViewChecked');\n    this.value++;\n  }\n}\n\n@Component({\n  selector: 'app-a2',\n  template: `\n    <div class=\"title\">A2 ({{ value }})</div>\n    <div class=\"content\">\n      <button type=\"button\" (click)=\"({})\">A2 Click</button>\n      <app-a2_1></app-a2_1>\n    </div>\n  `,\n  styles: [''],\n  changeDetection: changeDetectionStrategy,\n})\nexport class A2Component {\n  @HostBinding('class') class = 'box';\n  value = 0;\n  constructor() {}\n\n  ngAfterViewChecked(): void {\n    pwc().bg('IndianRed').color('white').log('A2Component.ngAfterViewChecked');\n    this.value++;\n  }\n}\n\n@Component({\n  selector: 'app-a2_1',\n  template: `\n    <div class=\"box\">\n      <div class=\"title\">A2_1 ({{ value }})</div>\n      <div class=\"content\">\n        <app-a2_1_1> </app-a2_1_1>\n      </div>\n    </div>\n  `,\n  styles: [''],\n  changeDetection: changeDetectionStrategy,\n})\nexport class A2_1Component {\n  value = 0;\n  constructor() {}\n\n  ngAfterViewChecked(): void {\n    pwc()\n      .bg('darkred')\n      .color('lightCoral')\n      .log('A2_1_Component.ngAfterViewChecked');\n    this.value++;\n  }\n}\n\n@Component({\n  selector: 'app-a2_1_1',\n  template: `\n    <div class=\"box\">\n      <div class=\"title\">A2_1_1 ({{ value }})</div>\n      <div class=\"content\">\n        <button (click)=\"({})\">Click</button>\n      </div>\n    </div>\n  `,\n  styles: [''],\n  changeDetection: changeDetectionStrategy,\n})\nexport class A2_1_1Component {\n  value = 0;\n  constructor() {}\n\n  ngAfterViewChecked(): void {\n    pwc()\n      .bg('Firebrick')\n      .color('orange')\n      .log('A2_1_1Component.ngAfterViewChecked');\n    this.value++;\n  }\n}\n\n@Component({\n  selector: 'app-a3',\n  template: `\n    <div class=\"title\">A3 ({{ value }})</div>\n    <div class=\"content\">A3 works!</div>\n  `,\n  styles: [''],\n  changeDetection: changeDetectionStrategy,\n})\nexport class A3Component {\n  @HostBinding('class') class = 'box';\n  value = 0;\n  constructor() {}\n\n  ngAfterViewChecked(): void {\n    pwc().bg('white').color('red').log('A3Component.ngAfterViewChecked');\n    this.value++;\n  }\n}\n\n//#endregion\n\n//#region Componentes B\n\n@Component({\n  selector: 'app-b1',\n  template: `\n    <div class=\"title\">B1 ({{ value }})</div>\n    <div class=\"content\"><app-b1_1></app-b1_1></div>\n  `,\n  changeDetection: changeDetectionStrategy,\n})\nexport class B1Component {\n  @HostBinding('class') class = 'box';\n  value = 0;\n\n  ngAfterViewChecked(): void {\n    pwc().bg('navy').color('white').log('B1Component.ngAfterViewChecked');\n    this.value++;\n  }\n}\n\n@Component({\n  selector: 'app-b1_1',\n  template: `\n    <div class=\"box\">\n      <div class=\"title\">B1_1 ({{ value }})</div>\n      <div class=\"content\"><app-b1_1_1></app-b1_1_1></div>\n    </div>\n  `,\n  changeDetection: changeDetectionStrategy,\n})\nexport class B1_1Component {\n  value = 0;\n\n  ngAfterViewChecked(): void {\n    pwc().bg('navy').color('white').log('B1_1_Component.ngAfterViewChecked');\n    this.value++;\n  }\n}\n\n@Component({\n  selector: 'app-b1_1_1',\n  template: `\n    <div class=\"box\">\n      <div class=\"title\">B1_1_1 ({{ value }})</div>\n      <div class=\"content\">\n        <button type=\"button\" (click)=\"({})\">Click</button>\n      </div>\n    </div>\n  `,\n  changeDetection: changeDetectionStrategy,\n})\nexport class B1_1_1Component {\n  value = 0;\n\n  ngAfterViewChecked(): void {\n    pwc().bg('navy').color('white').log('B1_1_1_Component.ngAfterViewChecked');\n    this.value++;\n  }\n}\n\n@Component({\n  selector: 'app-b2',\n  template: `\n    <div class=\"title\">B2 ({{ value }})</div>\n    <div class=\"content\">B2 works!</div>\n  `,\n  changeDetection: changeDetectionStrategy,\n})\nexport class B2Component {\n  @HostBinding('class') class = 'box';\n  value = 0;\n  ngAfterViewChecked(): void {\n    pwc().bg('royalblue').color('white').log('B2Component.ngAfterViewChecked');\n    this.value++;\n  }\n}\n\n@Component({\n  selector: 'app-b3',\n  template: `\n    <div class=\"title\">B3 ({{ value }})</div>\n    <div class=\"content\">B3 works!</div>\n  `,\n  changeDetection: changeDetectionStrategy,\n})\nexport class B3Component {\n  @HostBinding('class') class = 'box';\n  value = 0;\n  ngAfterViewChecked(): void {\n    pwc().bg('royalblue').color('white').log('B3Component.ngAfterViewChecked');\n    this.value++;\n  }\n}\n\n//#endregion\n\n//#region Componentes C\n\n@Component({\n  selector: 'app-c1',\n  template: `\n    <div class=\"title\">C1 ({{ value }})</div>\n    <div class=\"content\"></div>\n  `,\n  changeDetection: changeDetectionStrategy,\n})\nexport class C1Component {\n  @HostBinding('class') class = 'box';\n  value = 0;\n  ngAfterViewChecked(): void {\n    pwc().bg('olive').color('white').log('C1Component.ngAfterViewChecked');\n    this.value++;\n  }\n}\n\n@Component({\n  selector: 'app-c2',\n  template: `\n    <div class=\"title\">C2 ({{ value }})</div>\n    <div class=\"content\">\n      <button (click)=\"setValue()\">C2 works!</button>\n\n      <hr />\n    </div>\n  `,\n  changeDetection: changeDetectionStrategy,\n})\nexport class C2Component {\n  @HostBinding('class') class = 'box';\n  value = 0;\n  setValue() {\n    console.log('C2Component.setValue');\n  }\n\n  changeView(strategy: string) {}\n\n  ngAfterViewChecked(): void {\n    pwc().bg('green').color('white').log('C2Component.ngAfterViewChecked');\n    this.value++;\n  }\n}\n\n@Component({\n  selector: 'app-c3',\n  template: `\n    <div class=\"title\">C3 ({{ value2 }})</div>\n    <div class=\"content\">\n      <button (click)=\"setValue()\">C3 works!</button>\n    </div>\n  `,\n  changeDetection: changeDetectionStrategy,\n})\nexport class C3Component {\n  @HostBinding('class') class = 'box';\n  value2 = 0;\n  value = this.teste5service.val.asObservable();\n\n  constructor(private teste5service: Teste5Service) {}\n\n  setValue() {\n    console.log('C3Component.setValue');\n  }\n\n  ngAfterViewChecked(): void {\n    pwc().bg('black').color('lime').log('C3Component.ngAfterViewChecked');\n    this.value2++;\n  }\n}\n\n//#endregion\n\n@NgModule({\n  declarations: [\n    A1Component,\n    B1Component,\n    C1Component,\n    A2Component,\n    B2Component,\n    B3Component,\n    C2Component,\n    C3Component,\n    A3Component,\n    A2_1Component,\n    A2_1_1Component,\n    A1_1Component,\n    A1_2Component,\n    A1_1_1Component,\n    B1_1Component,\n    B1_1_1Component,\n  ],\n  imports: [CommonModule],\n  exports: [\n    A1Component,\n    B1Component,\n    C1Component,\n    A2Component,\n    B2Component,\n    B3Component,\n    C2Component,\n    C3Component,\n    A3Component,\n  ],\n})\nexport class ComboModule {}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste5/teste5-routing.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste5/teste5.component.html","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste5/teste5.component.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste5/teste5.component.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste5/teste5.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/fetch-cache/fetch-cache.component.html","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/fetch-cache/fetch-cache.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tap' is defined but never used.","line":5,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":25},{"ruleId":"@angular-eslint/no-empty-lifecycle-method","severity":2,"message":"Lifecycle methods should not be empty","line":19,"column":3,"nodeType":"MethodDefinition","messageId":"noEmptyLifecycleMethod","endLine":19,"endColumn":16,"suggestions":[{"messageId":"suggestRemoveLifecycleMethod","fix":{"range":[18,757],"text":" } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PokemonListComponent } from '../pokemons/pokemon-list/pokemon-list.component';\nimport { PokemonService } from '../poke-service.service';\nimport { Observable, tap } from 'rxjs';\nimport { Pokemon } from '../pokemons/pokemon.interface';\n\n@Component({\n  selector: 'tst-workspace-fetch-cache',\n  standalone: true,\n  imports: [CommonModule, PokemonListComponent],\n  templateUrl: './fetch-cache.component.html',\n  styleUrls: ['./fetch-cache.component.scss'],\n})\nexport class FetchCacheComponent  {\n  pokemons$: Observable<Pokemon[]> = this.pokeSrv.getPokemonsCache(50, 0);\n  constructor(private pokeSrv: PokemonService) {}\n\n  "},"desc":"Remove lifecycle method"}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'ngOnInit'.","line":19,"column":14,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":19,"endColumn":16}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PokemonListComponent } from '../pokemons/pokemon-list/pokemon-list.component';\nimport { PokemonService } from '../poke-service.service';\nimport { Observable, tap } from 'rxjs';\nimport { Pokemon } from '../pokemons/pokemon.interface';\n\n@Component({\n  selector: 'tst-workspace-fetch-cache',\n  standalone: true,\n  imports: [CommonModule, PokemonListComponent],\n  templateUrl: './fetch-cache.component.html',\n  styleUrls: ['./fetch-cache.component.scss'],\n})\nexport class FetchCacheComponent implements OnInit {\n  pokemons$: Observable<Pokemon[]> = this.pokeSrv.getPokemonsCache(50, 0);\n  constructor(private pokeSrv: PokemonService) {}\n\n  ngOnInit() {}\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/fetch-cashew/fetch-cashew.component.html","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/fetch-cashew/fetch-cashew.component.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/fetch-comp/fetch-comp.component.html","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/fetch-comp/fetch-comp.component.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/fetch-ngneat/fetch-ngneat.component.html","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/fetch-ngneat/fetch-ngneat.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result' is defined but never used.","line":32,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PokemonService } from '../poke-service.service';\nimport { PokemonListComponent } from '../pokemons/pokemon-list/pokemon-list.component';\nimport { SubscribeDirective } from '@ngneat/subscribe';\nimport { BehaviorSubject, switchMap, tap } from 'rxjs';\n\n@Component({\n  selector: 'tst-workspace-fetch-ngneat',\n  standalone: true,\n  imports: [CommonModule, PokemonListComponent, SubscribeDirective],\n  templateUrl: './fetch-ngneat.component.html',\n  styleUrls: ['./fetch-ngneat.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FetchNgneatComponent {\n  pokeService = inject(PokemonService);\n  // pokemons$ = this.pokeService.queryPokemons(0, 5).result$;\n\n  // persistedPokemons$ = this.pokeService.queryPokemonsWithStorage([\n  //   'pokemons',\n  //   { size: 30, offset: 50 },\n  // ]).result$;\n\n  private page = new BehaviorSubject(0);\n  page$ = this.page.asObservable();\n  pokemons$ = this.page$.pipe(\n    switchMap((page) =>\n      this.pokeService\n        .queryPokemonsWithStorage(['pokemons', page])\n        .result$.pipe(\n          tap((result) => {\n            console.log('prefetch');\n            this.pokeService.prefetch(page + 1);\n          })\n        )\n    )\n  );\n\n  nextPage() {\n    this.page.next(this.page.getValue() + 1);\n  }\n\n  prevPage() {\n    this.page.next(this.page.getValue() - 1);\n  }\n\n  trackBy(_: number, pokemon: { name: string }) {\n    return pokemon.name;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/fetch-service/fetch-service.component.html","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/fetch-service/fetch-service.component.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/fetch-service/fetch-service.component.ts","messages":[{"ruleId":"@angular-eslint/use-lifecycle-interface","severity":1,"message":"Lifecycle interface 'OnInit' should be implemented for method 'ngOnInit'. (https://angular.io/styleguide#style-09-01)","line":18,"column":3,"nodeType":"Identifier","messageId":"useLifecycleInterface","endLine":18,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PokemonService } from '../poke-service.service';\nimport { PokemonListComponent } from '../pokemons/pokemon-list/pokemon-list.component';\n\n@Component({\n  selector: 'tst-workspace-fetch-service',\n  standalone: true,\n  imports: [CommonModule, PokemonListComponent],\n  templateUrl: './fetch-service.component.html',\n  styleUrls: ['./fetch-service.component.scss'],\n})\nexport class FetchServiceComponent {\n  pokemons$ = this.pokeSrv.pokemons$;\n\n  constructor(public pokeSrv: PokemonService) {}\n\n  ngOnInit(): void {\n    this.pokeSrv.getPokemonsBs(50, 30);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/poke-service.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cache' is assigned a value but never used.","line":82,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { HttpClient } from '@angular/common/http';\nimport { Injectable, inject } from '@angular/core';\nimport { CacheBucket, HttpCacheManager, withCache } from '@ngneat/cashew';\nimport {\n  PersistedQueryService,\n  QueryClientService,\n  UsePersistedQuery,\n  UseQuery,\n  queryOptions,\n} from '@ngneat/query';\nimport {\n  BehaviorSubject,\n  ReplaySubject,\n  firstValueFrom,\n  of,\n  switchMap,\n  tap,\n} from 'rxjs';\nimport { Pokemon } from './pokemons/pokemon.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PokemonService {\n  private readonly http = inject(HttpClient);\n  private readonly useQuery = inject(UseQuery);\n  private readonly persistedQueryService = inject(PersistedQueryService);\n  private readonly queryClient = inject(QueryClientService);\n  private readonly usePersistedQuery = inject(UsePersistedQuery);\n  private readonly manager = inject(HttpCacheManager);\n\n  baseUrl = 'http://localhost:3000';\n  pokemonsBs = new BehaviorSubject<Pokemon[]>([]);\n  pokemons$ = this.pokemonsBs.asObservable();\n\n  cashewBucket = new CacheBucket();\n  testeCashew = new ReplaySubject<{ size: number; offset: number }>();\n\n  pokemonsCashew$ = this.testeCashew.asObservable().pipe(\n    switchMap(({ size, offset }) => {\n      console.log('pokemonsCashew$', { size, offset });\n      return this.http.get<Pokemon[]>(\n        `${this.baseUrl}/pokemons?size=${size}&offset=${offset}`,\n        {\n          context: withCache({\n            version: 'v1',\n            key: 'pokemons-ksw',\n            bucket: this.cashewBucket,\n            ttl: 1000 * 60,\n          }),\n        }\n      );\n    }),\n    tap(() => console.log('after switchMap'))\n  );\n\n  constructor() {\n    this.queryClient.setDefaultOptions({\n      queries: {\n        cacheTime: 1000 * 60 * 60 * 24, // 24 hours\n        staleTime: 2000,\n        retry: 0,\n      },\n    });\n  }\n\n  getPokemons(size = 10, offset = 0) {\n    return this.http.get<Pokemon[]>(\n      `${this.baseUrl}/pokemons?size=${size}&offset=${offset}`\n    );\n  }\n\n  getPokemonsCache(size = 10, offset = 0) {\n    return this.http.get<Pokemon[]>(\n      `${this.baseUrl}/pokemons?size=${size}&offset=${offset}`,\n      {\n        headers: { 'x-cache': 'true', 'x-refresh': 'true' },\n      }\n    );\n  }\n\n  getPokemonsBs(size = 10, offset = 0, cache = false) {\n    return this.getPokemons(size, offset).subscribe((pokemons) => {\n      this.pokemonsBs.next(pokemons);\n    });\n  }\n\n  getPokemons2(size = 10, offset = 0) {\n    const localStorageValue = window.localStorage.getItem('pokemons--stg');\n    if (localStorageValue) {\n      this.getPokemons(size, offset).subscribe();\n      return of(JSON.parse(localStorageValue));\n    }\n    return this.getPokemons(size, offset);\n  }\n\n  fetchPokemon(nextPage: number) {\n    console.log('nextPage', nextPage);\n    const page = nextPage || 0;\n    const size = 20;\n    const offset = page === 0 ? 0 : page * size;\n    return this.getPokemons(size, offset);\n  }\n\n  queryPokemonsWithStorage = this.usePersistedQuery(\n    (queryKey: ['pokemons', number]) => {\n      return queryOptions({\n        queryKey,\n        queryFn: ({ queryKey }) => {\n          const [, page] = queryKey;\n          console.log('queryfn');\n          return this.fetchPokemon(page);\n        },\n        cacheTime: 1000 * 60 * 2,\n      });\n    }\n  );\n\n  prefetch(page: number) {\n    console.log('PREFETCHING', page);\n    return this.queryClient.prefetchQuery(['pokemons', page], () => {\n      return firstValueFrom(this.fetchPokemon(page));\n    });\n  }\n\n  getPokemonWithCashew(size = 10, offset = 0) {\n    this.testeCashew.next({ size, offset });\n    console.log('getPokemonWithCashew');\n    return this.pokemonsCashew$;\n  }\n\n  invalidateCashew(size = 10, offset = 0) {\n    this.manager.delete(this.cashewBucket);\n    this.testeCashew.next({ size, offset });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/pokemons/pokemon-list/pokemon-list.component.html","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/pokemons/pokemon-list/pokemon-list.component.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/pokemons/pokemon-list/pokemon-list.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":6,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":6,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[506,509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[506,509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PokemonComponent } from '../pokemon/pokemon.component';\n\n@Component({\n  selector: 'app-pokemon-list',\n  standalone: true,\n  imports: [CommonModule, PokemonComponent],\n  templateUrl: './pokemon-list.component.html',\n  styleUrls: ['./pokemon-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PokemonListComponent {\n  @Input() pokemons: any[] = [];\n\n  trackBy(_: number, pokemon: { name: string }) {\n    return pokemon.name;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/pokemons/pokemon.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/pokemons/pokemon/pokemon.component.html","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/pokemons/pokemon/pokemon.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":5,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":5,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-pokemon',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './pokemon.component.html',\n  styleUrls: ['./pokemon.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PokemonComponent {\n  @Input() imageUrl = '';\n  @Input() name = '';\n  @Input() weight = 0;\n  @Input() height = 0;\n  @Input() abilities: string[] = [];\n  @Input() types: string[] = [];\n\n  get abilitiesList() {\n    return this.abilities.join(', ');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/teste6-routing.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/teste6.component.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[660,663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[660,663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { routes } from './teste6-routing.module';\n\n@Component({\n  template: `\n    <h2>Teste Services x Fetch</h2>\n\n    <nav class=\"bg-black text-white\">\n      <div class=\"container mx-auto flex items-center justify-between\">\n        <div class=\"flex-1\"></div>\n        <ul class=\"flex \">\n          <app-route-link\n            *ngFor=\"let route of routes\"\n            [link]=\"route.link\"\n            [label]=\"route.label\"\n          ></app-route-link>\n        </ul>\n      </div>\n    </nav>\n    <router-outlet></router-outlet>\n  `,\n  styles: [],\n})\nexport class Teste6Component {\n  routes = routes?.[0].children?.map((r: any) => ({\n    label: r.title ?? '',\n    link: r.path ?? '',\n  }));\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste6/teste6.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste7/app-a/app-a.component.html","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste7/app-a/app-a.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":8,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":8,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AfterViewChecked, Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport pwc from 'pretty-web-console';\nimport { Teste7Pipe } from '../teste7.pipe';\n\n@Component({\n  selector: 'tst-app-a',\n  standalone: true,\n  imports: [CommonModule, FormsModule, Teste7Pipe],\n  templateUrl: './app-a.component.html',\n  styleUrls: ['./app-a.component.scss'],\n})\nexport class AppAComponent implements AfterViewChecked {\n  inputValue = '';\n  value = 0;\n\n  get valueGetter() {\n    pwc().bg('green').color('white').log(`valueGetter`);\n    return `**${this.inputValue}**`;\n  }\n\n  ngAfterViewChecked(): void {\n    pwc()\n      .bg('red')\n      .color('white')\n      .log(`Teste 7 AppAComponent.ngAfterViewChecked ${this.value}`);\n    this.value++;\n  }\n\n  formatFn(value: string) {\n    pwc().bg('blue').color('white').log(`formatFn`);\n    return `__${value}__`;\n  }\n\n  handleButtonClick() {\n    pwc().bg('gray').color('black').log('click');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste7/teste7.component.html","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste7/teste7.component.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/pages/teste7/teste7.pipe.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":9,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Pipe, PipeTransform } from '@angular/core';\nimport pwc from 'pretty-web-console';\n\n@Pipe({\n  name: 'teste7',\n  standalone: true,\n})\nexport class Teste7Pipe implements PipeTransform {\n  transform(value: unknown, ...args: unknown[]): unknown {\n    pwc().bg('pink').color('purple').log(`➡️ ➡️ ➡️ ➡️ Pipe`);\n    return `-- ${value} --`;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/shared/colors.service.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":27,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":27,"endColumn":41,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[637,638],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":35,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":35,"endColumn":43,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[866,867],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":53,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":53,"endColumn":41,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[1420,1421],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ColorsService {\n  getDarkColors(n = 20): string[] {\n    return this.generateDarkColors(n);\n  }\n\n  getDarkColor(): string {\n    return this.generateDarkColors(1)[0];\n  }\n\n  getBrightColor() {\n    return this.generateBrightColors(1)[0];\n  }\n\n  randomColor(): string {\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n    return `rgb(${r}, ${g}, ${b})`;\n  }\n\n  darkenColor(color: string, factor = 0.5): string {\n    let [r, g, b] = color.match(/\\d+/g)!.map(Number);\n    r = Math.floor(r * factor);\n    g = Math.floor(g * factor);\n    b = Math.floor(b * factor);\n    return `rgb(${r}, ${g}, ${b})`;\n  }\n\n  rgbToHex(color: string): string {\n    const [r, g, b] = color.match(/\\d+/g)!.map(Number);\n    return `#${r.toString(16).padStart(2, '0')}${g\n      .toString(16)\n      .padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n  }\n\n  generateDarkColors(n: number): string[] {\n    const colors: string[] = [];\n    for (let i = 0; i < n; i++) {\n      const color = this.randomColor();\n      const darkColor = this.darkenColor(color);\n      const hexColor = this.rgbToHex(darkColor);\n      colors.push(hexColor);\n    }\n    return colors;\n  }\n\n  brightenColor(color: string, factor = 0.5): string {\n    let [r, g, b] = color.match(/\\d+/g)!.map(Number);\n    r = Math.min(255, r + Math.floor(255 * factor));\n    g = Math.min(255, g + Math.floor(255 * factor));\n    b = Math.min(255, b + Math.floor(255 * factor));\n    return `rgb(${r}, ${g}, ${b})`;\n  }\n\n  generateBrightColors(n: number): string[] {\n    const colors: string[] = [];\n    for (let i = 0; i < n; i++) {\n      const color = this.randomColor();\n      const brightColor = this.brightenColor(color);\n      const hexColor = this.rgbToHex(brightColor);\n      colors.push(hexColor);\n    }\n    return colors;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/shared/route-link.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"tst-workspace\" (https://angular.io/guide/styleguide#style-02-07)","line":6,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":6,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-route-link',\n  standalone: true,\n  imports: [CommonModule, RouterModule],\n  template: `\n    <li class=\"p-0 m-0\">\n      <a\n        [routerLink]=\"link\"\n        routerLinkActive=\"active\"\n        class=\"rota block hover:text-gray-300 transition-all p-2 border-b-2 border-b-transparent hover:border-b-2 hover:border-slate-200 cursor-pointer\"\n        >{{ label }}</a\n      >\n    </li>\n  `,\n  styles: [\n    `\n      a.rota.active {\n        border-bottom: 2px solid #fff;\n      }\n    `,\n  ],\n})\nexport class RouteLinkComponent {\n  @Input() link: string[] | string = '';\n  @Input() label = '';\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/app/shared/storage.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[422,425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[422,425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class StorageService<T> {\n  get(key: string): T | null {\n    const value = localStorage.getItem(`ng_key__${key}`);\n    return value ? JSON.parse(value) : null;\n  }\n\n  set(key: string, value: T) {\n    localStorage.setItem(`ng_key__${key}`, JSON.stringify(value));\n  }\n\n  remove(key: string) {\n    localStorage.removeItem(key);\n  }\n\n  removeExpired(expired: any) {\n    const keys: string[] = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key) {\n        keys.push(key);\n      }\n    }\n    for (const key of keys) {\n      const value = localStorage.getItem(key);\n      if (value) {\n        const entry = JSON.parse(value);\n        if (entry.lastRead < expired) {\n          localStorage.removeItem(key);\n        }\n      }\n    }\n  }\n\n  size() {\n    return localStorage.length;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/declarations.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/index.html","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/leogouveia/dev/repos/tst-workspace/apps/ng-tests/src/test-setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]